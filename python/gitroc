#!/usr/bin/env python3
#
#
#  Copyright (C) 2015 Ruben Undheim <ruben.undheim@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import os
import subprocess
import sys
import mysql.connector
import socket
import threading
import time
import json

		

def get_one(s,reponame,url='gitolite3@nuc:',branch='master'):
	data = {}
	data['command'] = 'checkout'
	data['reponame'] = reponame
	data['url'] = url
	data['commit'] = branch 
	jsondata = json.dumps(data)
	s.send(jsondata.encode('utf-8'))
	resp = s.recv(5000)

def send_message(jsondata=''):
	getipsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	getipsock.connect(("gmail.com",80))
	myipaddress = str(getipsock.getsockname()[0])
	getipsock.close()

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((myipaddress,19999))

	get_one(s,'testdevel')
	get_one(s,'auroranotifier-server')


	data = {}
	data['command'] = 'wait'
	jsondata = json.dumps(data)
	s.send(jsondata.encode('utf-8'))

	resp = s.recv(5000)
	recv_jsondata = json.loads(resp.decode('utf-8'))
	print(recv_jsondata)
	if 'symlinks' in recv_jsondata:
		for symlink in recv_jsondata['symlinks']:
			if 'symlink'  in symlink:
				localpath = "ip/%s" % (symlink['reponame'])
				os.system("""
mkdir -p %s
cd %s
ln -sfT %s %s
""" % (os.path.dirname(localpath),os.path.dirname(localpath),symlink['symlink'],os.path.basename(localpath)))

	data = {}
	data['command'] = 'exit'
	jsondata = json.dumps(data)
	s.send(jsondata.encode('utf-8'))
	resp = s.recv(10)

	s.close()


#if len(sys.argv) < 2:
#	print("Missing arguments")
#	sys.exit(-1)
#elif len(sys.argv) == 2:
#	branch = "master"
#else:
#	branch = sys.argv[2]

send_message()

