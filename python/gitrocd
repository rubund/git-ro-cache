#!/usr/bin/env python3
#
#
#  Copyright (C) 2015,2016 Ruben Undheim <ruben.undheim@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


import os
import subprocess
import sys
import sqlite3
import socket
import threading
import time
import json
import queue
import base64
import datetime
import struct
import signal
import re
import shlex
import argparse
import atexit

debug = False
old_db_style = False

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--daemon",   action="store_true")
parser.add_argument("-l", "--log_file", type=str, default="/dev/null")
parser.add_argument("-p", "--pid_file", type=str, default="/tmp/gitrocd.pid")
args = parser.parse_args()

if args.daemon and args.log_file == "/dev/null":
    sys.stderr.write("\033[31mError:\033[0m The -l option is required to save the log somewhere in daemon mode\n")
    sys.exit(-1)

if os.path.isfile(args.pid_file):
    sys.stderr.write("\033[31mError:\033[0m Pid file exists (%s). Is gitrocd already running? Check, if not, then delete the pid file and try again\n" % (args.pid_file))
    sys.exit(-1)


cachearea = "/tmp/gitrocache"
lockarea = "/tmp/gitrocache/locks"
dbpath = '/tmp/gitrocd.db'
umask = "027"
os.system("mkdir -p %s" % (cachearea))
os.system("rm -f %s/locks/*.lock" % (cachearea))

clients = []
clientnum = 0
clock = threading.Lock()

workqueues = []
glock = threading.Lock()

dbexists = False
if os.path.isfile(dbpath):
    dbexists = True
conn = sqlite3.connect(
    dbpath, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
cursor = conn.cursor()


def conn_commit_safe():
    global conn
    global cursor
    try:
        conn.commit()
        return True
    except sqlite3.OperationalError as e:
        print(e)
        conn = sqlite3.connect(
            dbpath, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
        cursor = conn.cursor()
        return False


r = False
if not dbexists:
    while not r:
        cursor.execute("""
CREATE TABLE `gitroc_lastaccess` (
  `id` INTEGER PRIMARY KEY,
  `timestamp` timestamp ,
  `git_url` varchar(256) ,
  `git_reponame` varchar(256),
  `git_commit` varchar(256)
);
""")
        cursor.execute("""
CREATE INDEX `index_gitroc_lastaccess`
  ON `gitroc_lastaccess` (git_url,git_reponame,git_commit);
""")
        cursor.execute("""
CREATE TABLE `gitroc_revparse` (
  `id` INTEGER PRIMARY KEY,
  `timestamp` timestamp ,
  `git_branch` varchar(256) ,
  `git_url` varchar(256) ,
  `git_reponame` varchar(256),
  `git_commit` varchar(256),
  `istag` boolean
);
""")
        cursor.execute("""
CREATE INDEX `index_gitroc_revparse`
  ON `gitroc_revparse` (git_reponame,git_branch,git_url);
""")
        r = conn_commit_safe()

dblock = threading.Lock()


class MissingArgumentError(BaseException):

    def __init(self):
        ""


class CannotFindError(BaseException):

    def __init(self):
        ""

def recv_msg(sock):
    first = sock.recv(1)
    if first == b'{': # If present, expect old-style
      remaining = sock.recv(5000)
      fullmsg = first + remaining
      return fullmsg.decode('utf-8')
    else:
      raw_msglen_end = sock.recv(3)
      if not raw_msglen_end:
          return None
      raw_msglen = first + raw_msglen_end
      msglen = struct.unpack('>I', raw_msglen)[0]
      return recvall(sock, msglen)


def recvall(sock, n):
    data = ''
    while len(data) < n:
        packet = sock.recv(n - len(data))
        if not packet:
            return None
        data += packet.decode('utf-8')
    return data


def send_msg(sock, msg):
    msg = struct.pack('>I', len(msg)) + msg
    partsize = 1000
    n = 0
    while len(msg) > n:
        if len(msg) > n + partsize:
            thissize = partsize
        else:
            thissize = len(msg) - n
        part = msg[n:n + thissize]
        n = n + thissize
        sock.send(part)


def lock_repo(reponame):
    available = False
    while not available:
        lock_path = "".join([lockarea,"/",reponame,".lock"])
        glock.acquire()
        if not os.path.isfile(lock_path):
            available = True
            os.system("mkdir -p %s && touch %s" %
                      (shlex.quote(lockarea), shlex.quote(lock_path)))
            glock.release()
            break
        glock.release()
        time.sleep(0.1)


def unlock_repo(reponame):
    lock_path = "".join([lockarea,"/",reponame,".lock"])
    glock.acquire()
    os.system("rm -f %s" % (shlex.quote(lock_path)))
    glock.release()


def clone_repo(url, urlstr, reponame, version=1):
    full_path = "".join([cachearea,"/",urlstr])
    full_url = "".join([url, reponame])
    full_path_quoted = shlex.quote(full_path)
    command = """
umask %s
mkdir -p %s
cd %s
GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git clone --bare %s %s
cd %s
git config --local remote.origin.fetch "+refs/heads/*:refs/heads/*"
""" % (umask, full_path_quoted, full_path_quoted, shlex.quote(full_url), shlex.quote(reponame), shlex.quote(reponame))
    if debug:
        print(command)
        os.system(command)
    else:
        try:
            subprocess.check_output(
                command, stderr=subprocess.STDOUT, shell=True)
        except subprocess.CalledProcessError:
            return ""


def is_empty_repo(urlstr, reponame):
    full_path = "".join([cachearea,"/",urlstr,"/",reponame])
    command = """
cd %s
git show-ref > /dev/null
"""  % (shlex.quote(full_path))
    try:
        subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
    except subprocess.CalledProcessError:
        return 1  # Empty git repo
    return 0


def rev_parse(urlstr, reponame, branch):
    full_path = "".join([cachearea,"/",urlstr,"/",reponame])
    command = """
umask %s
cd %s
git rev-parse %s
""" % (umask, shlex.quote(full_path), shlex.quote(branch))
    if debug:
        print(command)
    try:
        rev = subprocess.check_output(
            command, stderr=subprocess.DEVNULL, shell=True).decode('utf-8').strip()
    except subprocess.CalledProcessError:
        return ""

    if rev == branch:
        command = """
cd %s
git cat-file -p %s
""" % (shlex.quote(full_path), shlex.quote(branch))
        istag = False
        commitrev = ""
        try:
            catfile = subprocess.check_output(
                command, stderr=subprocess.DEVNULL, shell=True).decode('utf-8').strip()
            lines = catfile.split('\n')
            for l in lines:
                if l[0:6] == 'object':
                    splitted = l.split()
                    if splitted != None and len(splitted) >= 2:
                        commitrev = splitted[1]
                elif l[0:3] == 'tag':
                    istag = True
        except subprocess.CalledProcessError:
            commitrev = branch
        if istag and commitrev != "":
            rev = commitrev
    return rev

def is_tag(urlstr, reponame, branch):
    full_path = "".join([cachearea,"/",urlstr,"/",reponame])
    if branch[0:5] == "tags/":
        branch = branch[5:]
    refstr = "".join(["refs/tags/",branch])
    command = """
umask %s
cd %s
git show-ref --verify %s
""" % (umask, shlex.quote(full_path), shlex.quote(refstr))
    try:
        rev = subprocess.check_output(
            command, stderr=subprocess.DEVNULL, shell=True).decode('utf-8').strip()
        return True
    except subprocess.CalledProcessError:
        return False


def git_fetch(urlstr, reponame):
    full_path = "".join([cachearea,"/",urlstr,"/",reponame])
    command = """
umask %s
cd %s
git fetch --tags --all
""" % (umask, shlex.quote(full_path))
    if debug:
        print(command)
        os.system(command)
    else:
        try:
            subprocess.check_output(
                command, stderr=subprocess.STDOUT, shell=True)
        except subprocess.CalledProcessError:
            return ""


def commit_exists(urlstr, reponame, rev):
    full_path = "".join([cachearea,"/",urlstr,"/",reponame])
    if debug:
        print(rev)
    command = """
umask %s
cd %s
git rev-list --all --remotes | grep -q %s
echo $?
""" % (umask, shlex.quote(full_path), shlex.quote(rev))
    if debug:
        print(command)
    missing = int(subprocess.check_output(
        command, stderr=subprocess.STDOUT, shell=True).decode('utf-8').strip())
    return not missing


def splitout(urlstr, reponame, rev):
    full_path = "".join([cachearea,"/",urlstr,"/",reponame])
    cache_url = "".join(["cache/", rev])
    full_cache_url = "".join([full_path,"/",cache_url])
    command = """
umask %s
cd %s
mkdir -p %s
chmod -R u+w %s
git archive %s | tar -x -C %s
""" % (umask, shlex.quote(full_path), shlex.quote(cache_url), shlex.quote(cache_url), shlex.quote(rev), shlex.quote(cache_url))
    if debug:
        print(command)
        os.system(command)
    else:
        try:
            subprocess.check_output(
                command, stderr=subprocess.STDOUT, shell=True)
        except subprocess.CalledProcessError:
            return ""

    retmain = 0
    if retmain == 0:
        command = """
cd %s
chmod -R a-w %s
""" % (shlex.quote(full_path), shlex.quote(cache_url))
    else:  # If failed, delete cache version
        command = """
rm -rf %s
""" % (shlex.quote(full_cache_url))
    os.system(command)
    return retmain


class CleanupThread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.running = 1

    def run(self):
        while self.running:
            dblock.acquire()
            check_if_db_open()
            nowtime = datetime.datetime.now()
            cursor.execute("select id,git_url,git_reponame,git_commit,timestamp from gitroc_lastaccess where julianday(timestamp) < (julianday('%s') - 30)" %
                           (nowtime))  # Specify days here
            rows = cursor.fetchall()
            dblock.release()
            for row in rows:
                urlstr = base64.urlsafe_b64encode(
                    row[1].encode('utf-8')).decode('utf-8')
                full_cache_url = "".join([cachearea,"/",urlstr,"/",row[2],"/cache/",row[3]])
                lock_repo(row[2])
                command = """
chmod -R u+w %s
rm -rf %s
""" % (shlex.quote(full_cache_url), shlex.quote(full_cache_url))
                print(command)
                os.system(command)
                unlock_repo(row[2])

            if len(rows) > 0:
                dblock.acquire()
                check_if_db_open()
                r = False
                while not r:
                    for row in rows:
                        query = "delete from gitroc_lastaccess where id=? and git_commit=?"
                        cursor.execute(query, (row[0], row[3]))
                    r = conn_commit_safe()
                dblock.release()
            for i in range(0, 10):
                if not self.running:
                    break
                time.sleep(1)


def just_updated(url, reponame, rev):
    justupdated = False
    dblock.acquire()
    check_if_db_open()
    nowtime = datetime.datetime.now()
    cursor.execute(
        "select id,timestamp from gitroc_lastaccess where git_reponame=? and git_commit=? and git_url=?", (reponame, rev, url))
    row = cursor.fetchone()
    if row:
        timestamp = row[1]
        if(timestamp > nowtime - datetime.timedelta(seconds=10)):
            print("Just updated (%s)" % (reponame))
            justupdated = True
    dblock.release()
    return justupdated


def check_if_db_open():
    global conn
    global cursor
    try:
        cursor.execute("select 1 from gitroc_lastaccess")
    except sqlite3.ProgrammingError as e:
        print(e)
        conn = sqlite3.connect(
            dbpath, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
        cursor = conn.cursor()

def get_current_branches(urlstr, reponame):
    full_path = "".join([cachearea,"/",urlstr,"/",reponame])
    command = """
umask %s
cd %s
git branch | tr '*' ' '
""" % (umask, shlex.quote(full_path))
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True).decode('utf-8').strip()
    except subprocess.CalledProcessError:
        return []
    branches = []
    lines = output.split('\n')
    for l in lines:
        branches.append(l.strip())
    return branches

def remove_branches(urlstr, reponame, branches):
    try:
        cmd = ""
        first = True
        for b in branches:
            if first:
                first = False
                cmd = cmd + "git branch -D %s" % (shlex.quote(b))
            else:
                cmd = cmd + "; git branch -D %s" % (shlex.quote(b))
        full_path = "".join([cachearea,"/",urlstr,"/",reponame])
        command = "umask %s ; cd %s ; %s" % (umask, shlex.quote(full_path), cmd)
        subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
    except subprocess.CalledProcessError:
        pass

def handle_one(number, action, version, url, reponame, branch, clientqueue, mode, requestedtime, afterpath, regenerate_cache_entry=False):
    urlstr = base64.urlsafe_b64encode(url.encode('utf-8')).decode('utf-8')
    lock_repo(reponame)

    try:
        dblock.acquire()
        check_if_db_open()
        cursor.execute(
            "select id from gitroc_lastaccess where git_reponame=? and git_url=? limit 1", (reponame, url))
        row = cursor.fetchone()
        dblock.release()

        full_path = "".join([cachearea,"/",urlstr,"/",reponame])

        if row == None and not os.path.isdir(full_path):
            clone_repo(url, urlstr, reponame, version=version)
            if(not os.path.isdir(full_path)):
                raise CannotFindError
            os.system("cd %s ; git symbolic-ref HEAD refs/heads/THIS_IS_ONLY_CACHE" % (shlex.quote(full_path)))
        elif action == "fetchonly":
            os.system("cd %s ; git symbolic-ref HEAD refs/heads/THIS_IS_ONLY_CACHE" % (shlex.quote(full_path)))
            current_branches = get_current_branches(urlstr, reponame)
            remove_branches(urlstr, reponame, current_branches) # remove all branches
            git_fetch(urlstr, reponame) # then re-fetch all branches
            unlock_repo(reponame)
            return

        if row == None and is_empty_repo(urlstr, reponame):
            git_fetch(urlstr, reponame)
            if is_empty_repo(urlstr, reponame):
                full_cache_path = "".join([full_path,"/cache/empty"])
                os.system("mkdir -p %s" %
                          (shlex.quote(full_cache_path)))
                clientqueue.put((-6, number, full_cache_path, reponame, "empty", "empty"))
                unlock_repo(reponame)
                return

        rowrevparse = None
        notfoundindb = False

        istag = False
        dblock.acquire()
        check_if_db_open()
        cursor.execute(
            "select id, git_commit, istag from gitroc_revparse where git_branch=? and git_reponame=? and git_url=? limit 1", (branch, reponame, url))
        rowrevparse = cursor.fetchone()
        dblock.release()
        if rowrevparse == None:
            notfoundindb = True
            istag = is_tag(urlstr, reponame, branch)
        else:
            istag = rowrevparse[2]


        if rowrevparse == None or not istag: # If not tag, always do this
            rev = rev_parse(urlstr, reponame, branch)
        else:
            rev = rowrevparse[1]

        if debug:
            print(rev)
        justupdated = False
        if rev == branch:  # Commit id has been specified directly
            if commit_exists(urlstr, reponame, rev) == 0:
                git_fetch(urlstr, reponame)
                if commit_exists(urlstr, reponame, rev) == 0:
                    raise CannotFindError
        elif rev == "":    # Cannot find reference, maybe needs fetch
            git_fetch(urlstr, reponame)
            rev = rev_parse(urlstr, reponame, branch)
            if rev == "":
                raise CannotFindError
        else:              # Has found reference, but maybe needs to update
            if (mode != 1 and not istag) or action == "fetchonly":
                justupdated = just_updated(url, reponame, rev)
                if not justupdated or action == "fetchonly":
                    git_fetch(urlstr, reponame)
                    rev = rev_parse(urlstr, reponame, branch)
            if rev == "":
                raise CannotFindError

        if notfoundindb and istag: # only store tags in database
            nowtime = datetime.datetime.now()
            dblock.acquire()
            check_if_db_open()
            r = False
            while not r:
                query = "insert into gitroc_revparse (git_commit, git_reponame, git_branch, timestamp, git_url, istag) values (?,?,?,?,?,?)"
                cursor.execute(query, (rev, reponame, branch, nowtime, url, istag))
                r = conn_commit_safe()
            dblock.release()

        if debug:
            print(rev)

        if rev == "":
            raise CannotFindError

        full_cache_path = "".join([full_path,"/cache/",rev])
        if regenerate_cache_entry:
            if os.path.isdir(full_cache_path):
                os.system("chmod -R u+w %s" %
                          (shlex.quote(full_cache_path)))
                os.system("rm -rf %s" %
                          (shlex.quote(full_cache_path)))

            dblock.acquire()
            check_if_db_open()
            cursor.execute(
                "select id from gitroc_lastaccess where git_commit=? and git_reponame=?", (rev, reponame))
            rows = cursor.fetchall()
            r = False
            while not r:
                for row in rows:
                    query = "delete from gitroc_lastaccess where id=?"
                    cursor.execute(query, (row[0],))
                r = conn_commit_safe()
            dblock.release()

        if action == "process":
            if os.path.isdir(full_cache_path):
                retmain = 0
                if debug:
                    print("Already exists")
            else:
                retmain = splitout(urlstr, reponame, rev)
            full_after_path = "".join([full_cache_path,afterpath])
            clientqueue.put((retmain, number, full_after_path, reponame, branch, rev))

        unlock_repo(reponame)
        if not justupdated and action == "process":
            dblock.acquire()
            check_if_db_open()
            nowtime = datetime.datetime.now()
            cursor.execute(
                "select id from gitroc_lastaccess where git_reponame=? and git_commit=? and git_url=?", (reponame, rev, url))
            row = cursor.fetchone()
            r = False
            while not r:
                if row != None:
                    cursor.execute(
                        "update gitroc_lastaccess set timestamp=? where id=?", (nowtime, row[0]))
                else:
                    cursor.execute(
                        "insert into gitroc_lastaccess (timestamp,git_url,git_reponame,git_commit) values (?,?,?,?);", (nowtime, url, reponame, rev))
                r = conn_commit_safe()
            dblock.release()

    except CannotFindError:
        print("Cannot find the specified repository or revision (%s)" %
              (reponame))
        # send_data['error'] = 'Not found'
        # send_data['return'] = -1
        clientqueue.put((-1, number, '', reponame, branch, ''))
        unlock_repo(reponame)


def mqtt_publish(ipaddr, port, topic, message):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(1)
    try:
        s.connect((ipaddr, port))

        msg_type = 0x10 # Connect
        client_identifier = "gitrocache-dogit"
        client_identifier_length_field = bytes([len(client_identifier)])
        content = bytes([0x00, 0x06, 0x4d, 0x51, 0x49, 0x73, 0x64, 0x70, 0x03, 0x02, 0x00, 0x3c, 0x00]) + client_identifier_length_field + client_identifier.encode('utf-8')
        msg_len = bytes([len(content)])
        msg = bytes([msg_type]) + msg_len + content
        s.send(msg)

        msg_type = 0x30 # Publish
        lentopic = len(topic)
        lentopic_msb = int(lentopic / 256)
        lentopic_lsb = lentopic % 256
        topic_length_field = bytes([lentopic_msb, lentopic_lsb])
        content = topic_length_field + topic.encode('utf-8') + message.encode('utf-8')
        lenmsg = len(content)
        if lenmsg > 1000:
            content = content[0:1000]
            lenmsg = 1000

        msg_len = bytes([])
        while lenmsg > 0:
            digit = lenmsg % 128
            lenmsg = int(lenmsg / 128)
            if lenmsg > 0:
                digit = digit | 0x80
            msg_len = msg_len + bytes([digit])
        msg = bytes([msg_type]) + msg_len + content

        s.send(msg)
        s.close()

    except ConnectionRefusedError:
        print("Failed publishing to MQTT broker. Ignore failure")
        pass
    except BrokenPipeError:
        print("Connection to MQTT broker closed before it got the chance to send")
        pass
    except OSError:
        print("Could not reach MQTT broker")
        pass
    except Exception:
        print("Other unknown Exception in MQTT publish function")
        pass
    sys.stdout.flush()
    sys.stderr.flush()



class WorkerThread(threading.Thread):

    def __init__(self, q):
        threading.Thread.__init__(self)
        self.running = 1
        self.q = q

    def run(self):
        if debug:
            print("WorkerThread started")
        while self.running:
            (number, action, version, url, reponame, branch, clientqueue,
             mode, requestedtime, afterpath) = self.q.get()
            if action == 'quit':  # Stopping worker thread
                break
            handle_one(number, action, version, url, reponame, branch,
                       clientqueue, mode, requestedtime, afterpath)
            self.q.task_done()


class ClientHandler(threading.Thread):

    def __init__(self, clientsocket, address):
        threading.Thread.__init__(self)
        global clientnum
        if debug:
            print("Created client handler")
        self.clientsocket = clientsocket
        self.address = address
        self.running = True
        clock.acquire()
        clients.append((self, clientnum))
        self.num = clientnum
        clientnum = clientnum + 1
        clock.release()
        self.workqueue = -1
        for j in range(0, len(workqueues)):
            if workqueues[j].empty():
                self.workqueue = j
                break
        if self.workqueue == -1:
            self.workqueue = 0

    def run(self):
        clientqueue = queue.Queue()
        requests = 0
        sent_so_far = 0
        self.clientsocket.settimeout(1)
        if debug:
            print("Client socket running")
        while self.running:
            try:
                jsondata = recv_msg(self.clientsocket)
            except socket.timeout:
                continue
            except socket.error:
                self.running = False
                break
            except struct.error as e:
                print("Recived struct.error. Closing connection: (%s)" % (str(e)))
                self.running = False
                break
            if not jsondata or not self.running:
                self.running = False
                break
            if debug:
                print(jsondata)
            send_data = {}
            try:
                data = json.loads(jsondata)
                if debug:
                    print(data)

                if 'command' in data:
                    if data['command'] == 'checkout' or data['command'] == 'fetchonly':
                        if 'commit' in data:
                            branch = data['commit']
                        else:
                            branch = 'master'
                        if not isinstance(branch, str) or ".." in branch or " " in branch:
                            raise MissingArgumentError
                        if 'version' in data:
                            version = (int(data['version']))
                        else:
                            version = 1
                        if not 'url' in data:
                            raise MissingArgumentError
                        url = data['url']
                        if not isinstance(url, str) or ".." in url:
                            raise MissingArgumentError
                        if not 'reponame' in data:
                            raise MissingArgumentError
                        reponame = data['reponame']
                        if not isinstance(reponame, str) or ".." in reponame or "/" in reponame:
                            raise MissingArgumentError
                        if not 'mode' in data:
                            raise MissingArgumentError
                        if 'number' in data:
                            number = int(data['number'])
                        else:
                            number = -1
                        mode = data['mode']
                        nowtime = datetime.datetime.now()
                        if 'afterpath' in data:
                            afterpath = data['afterpath']
                            if not isinstance(afterpath, str) or ".." in afterpath: # Do not allow ".." in afterpath
                                afterpath = ""
                            elif len(afterpath) > 0 and afterpath[0] != '/':
                                afterpath = "/%s" % (afterpath)
                        else:
                            afterpath = ""
                        if data['command'] == 'checkout':
                            workqueues[self.workqueue].put(
                                (number, 'process', version, url, reponame, branch, clientqueue, mode, nowtime, afterpath))
                            requests = requests + 1
                        elif data['command'] == 'fetchonly':
                            workqueues[self.workqueue].put(
                                (number, 'fetchonly', version, url, reponame, branch, clientqueue, mode, nowtime, afterpath))
                        print("Requesting %s:%s (%s)..." %
                              (url, reponame, branch))
                        if debug:
                            print("requests: %d" % requests)

                        send_data['return'] = 0
                    elif data['command'] == 'wait':
                        if debug:
                            print("requests: %d" % requests)
                        send_data['symlinks'] = []
                        for i in range(sent_so_far, requests):
                            element = {}
                            (returncode, number, symlink, reponame,
                             branch, rev) = clientqueue.get()
                            sent_so_far = sent_so_far + 1
                            if number != -1:
                                element['number'] = number
                            element['reponame'] = reponame
                            element['branch'] = branch
                            element['returncode'] = returncode
                            if returncode == 0 or returncode == -6:
                                element['symlink'] = symlink
                                element['found'] = 'true'
                            else:
                                element['found'] = 'false'
                            send_data['symlinks'].append(element)
                            clientqueue.task_done()
                        send_data['complete'] = True
                        send_data['return'] = 0
                    elif data['command'] == 'status':
                        if debug:
                            print("requests: %d" % requests)
                        send_data['symlinks'] = []
                        send_data['complete'] = True
                        for i in range(sent_so_far, requests):
                            element = {}
                            if not clientqueue.empty():
                                (returncode, number, symlink, reponame,
                                 branch, rev) = clientqueue.get()
                                sent_so_far = sent_so_far + 1
                                if number != -1:
                                    element['number'] = number
                                element['reponame'] = reponame
                                element['branch'] = branch
                                element['returncode'] = returncode
                                if returncode == 0 or returncode == -6:
                                    element['symlink'] = symlink
                                    element['found'] = 'true'
                                else:
                                    element['found'] = 'false'
                                send_data['symlinks'].append(element)
                                clientqueue.task_done()
                            else:
                                send_data['complete'] = False
                        send_data['return'] = 0
                    elif data['command'] == 'exit':
                        self.running = False
                        break
            except ValueError:
                print("Not valid JSON data")
            except MissingArgumentError:
                print("Missing one argument")
                send_data['error'] = 'Missing argument'
                send_data['return'] = -1
            send_jsondata = json.dumps(send_data)
            send_msg(self.clientsocket, send_jsondata.encode('utf-8'))
        self.clientsocket.close()
        clock.acquire()
        thisclient = None
        for client in clients:
            if client[1] == self.num:
                print("removing %s from %s" % (client, clients))
                clients.remove(client)
                break
        clock.release()
        print("stopped client thread")
        sys.stdout.flush()
        sys.stderr.flush()


class ServerThread(threading.Thread):

    def __init__(self, s):
        threading.Thread.__init__(self)
        self.running = 1
        self.s = s
        if debug:
            print("Created server thread")

    def run(self):
        if debug:
            print("Running thread")
            print("started listening")
        while self.running:
            (clientsocket, address) = self.s.accept()
            client_handler = ClientHandler(clientsocket, address)
            client_handler.start()
        self.s.close()


def listen_incoming(myipaddress):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    s.bind((myipaddress, 19999))
    s.listen(10)
    server_thread = ServerThread(s)
    server_thread.start()
    return server_thread

running = True


def stop_server():
    global running
    running = False
    print("Stopping gitrocd..")
    # Stopping listening thread:
    server_thread.running = False
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((myipaddress, 19999))
    s.close()

    clients_to_wait_for = []
    clock.acquire()
    for client in clients:
        client[0].running = False
        clients_to_wait_for.append(client[0])
    clock.release()

    for client in clients_to_wait_for:
        if client.is_alive():
            client.join()

    # Stopping worker threads
    cleanup_thread.running = False
    for w in worker_thread:
        w.running = False
        w.q.put((-1, 'quit', None, None, None, None, None, None, None, None))

    server_thread.join()
    for w in worker_thread:
        w.join()
    print("Completing cleanup...")
    cleanup_thread.join()
    conn.close()
    print("Done")


def signal_handler(signal, frame):
    global running
    if running:
        stop_server()
    else:
        sys.exit(-1)
    print("\nServer stopped\nPress enter")


def signal_handler_kill(signal, frame):
    global running
    if running:
        stop_server()
    else:
        sys.exit(-1)


#getipsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
#getipsock.connect(("gmail.com", 80))
#myipaddress = str(getipsock.getsockname()[0])
#getipsock.close()
myipaddress = "localhost"

if args.daemon:
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError as e:
        print("fork #1 failed: %d (%s)" % (e.errno, e.strerror))
        sys.exit(1)

    #os.chdir("/")
    os.setsid()
    #os.umask(0)

    try:
        pid = os.fork()
        if pid > 0:
            print("Going to daemon mode...")
            sys.exit(0)
    except OSError as e:
        print("fork #2 failed: %d (%s)" % (e.errno, e.strerror))
        sys.exit(1)

    sys.stdout.flush()
    sys.stderr.flush()
    sys.stderr = sys.stdout
    si = open('/dev/null', 'r')
    so = open(args.log_file, 'a')
    #se = open('/dev/null', 'a')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    #os.dup2(se.fileno(), sys.stderr.fileno())


def delpid():
    os.remove(args.pid_file)

atexit.register(delpid)
pid = str(os.getpid())
with open(args.pid_file, 'w') as fp:
    fp.write("%s\n" % pid)


worker_thread = []
for i in range(0, 4):
    tmpq = queue.Queue()
    workqueues.append(tmpq)
    for j in range(0, 10):
        tmp = WorkerThread(tmpq)
        worker_thread.append(tmp)
        tmp.start()

server_thread = listen_incoming("localhost")

cleanup_thread = CleanupThread()
cleanup_thread.start()

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler_kill)

print("gitrocd is running...")

if not args.daemon:
    cmd = input("")
    while cmd != 'q' and cmd != 'quit' and running:
        print("Enter 'q' og 'quit' to quit")
        cmd = input("")

    if running:
        stop_server()
